// Automatically generated by flapigen
#pragma once

#include <cassert>
#include <memory> //for std::unique_ptr

#include "rust_str.h"

#include "c_DataObserver.h"

namespace sifir_lib {

class DataObserver {
public:
    virtual ~DataObserver() noexcept {}

    virtual void onData(RustString result) noexcept = 0;

    virtual void onError(RustString result) noexcept = 0;


    static C_DataObserver to_c_interface(std::unique_ptr<DataObserver> p)
    {
        assert(p != nullptr);
        C_DataObserver ret;
        ret.opaque = p.release();

        ret.C_DataObserver_deref = c_DataObserver_deref;
        ret.onData = c_onData;
        ret.onError = c_onError;

        return ret;
    }
private:

    static void c_DataObserver_deref(void *opaque)
    {
        auto p = static_cast<DataObserver *>(opaque);
        delete p;
    }

    static void c_onData(struct CRustString result, void *opaque)
    {
        assert(opaque != nullptr);
        auto pi = static_cast<DataObserver *>(opaque);

        pi->onData(RustString{result});
    }

    static void c_onError(struct CRustString result, void *opaque)
    {
        assert(opaque != nullptr);
        auto pi = static_cast<DataObserver *>(opaque);

        pi->onError(RustString{result});
    }

};
} // namespace sifir_lib
