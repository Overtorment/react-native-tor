// Automatically generated by flapigen
#pragma once

//for assert
#include <cassert>
//for std::abort
#include <cstdlib>
//for std::move
#include <utility>
//for std::conditional
#include <type_traits>

#include <stdint.h>
#include "DataObserver.hpp"
#include <memory>
#include <utility>
#include "c_DataObserver.h"

#include "c_HiddenServiceHandler.h"

namespace sifir_lib {

template<bool>
class HiddenServiceHandlerWrapper;
using HiddenServiceHandler = HiddenServiceHandlerWrapper<true>;
using HiddenServiceHandlerRef = HiddenServiceHandlerWrapper<false>;


template<bool OWN_DATA>
class HiddenServiceHandlerWrapper {
public:
    using value_type = HiddenServiceHandlerWrapper<true>;
    friend class HiddenServiceHandlerWrapper<true>;
    friend class HiddenServiceHandlerWrapper<false>;

    using SelfType = typename std::conditional<OWN_DATA, HiddenServiceHandlerOpaque *, const HiddenServiceHandlerOpaque *>::type;
    using CForeignType = HiddenServiceHandlerOpaque;

    HiddenServiceHandlerWrapper(HiddenServiceHandlerWrapper &&o) noexcept: self_(o.self_)
    {
        o.self_ = nullptr;
    }
    HiddenServiceHandlerWrapper &operator=(HiddenServiceHandlerWrapper &&o) noexcept
    {
        assert(this != &o);
        free_mem(this->self_);
        self_ = o.self_;
        o.self_ = nullptr;
        return *this;
    }
    explicit HiddenServiceHandlerWrapper(SelfType o) noexcept: self_(o) {}
    HiddenServiceHandlerOpaque *release() noexcept
    {
        HiddenServiceHandlerOpaque *ret = self_;
        self_ = nullptr;
        return ret;
    }
    explicit operator SelfType() const noexcept { return self_; }
    HiddenServiceHandlerWrapper<false> as_rref() const noexcept { return HiddenServiceHandlerWrapper<false>{ self_ }; }
    const HiddenServiceHandlerWrapper<true> &as_cref() const noexcept { return reinterpret_cast<const HiddenServiceHandlerWrapper<true> &>(*this); }

    HiddenServiceHandlerWrapper(const HiddenServiceHandlerWrapper&) = delete;
    HiddenServiceHandlerWrapper &operator=(const HiddenServiceHandlerWrapper&) = delete;

    HiddenServiceHandlerWrapper(uint16_t dst_port, std::unique_ptr<DataObserver> cb) noexcept
    {

        C_DataObserver tmp = DataObserver::to_c_interface(std::move(cb));
        const struct C_DataObserver * const a1 = &tmp;

        this->self_ = HiddenServiceHandler_new(dst_port, std::move(a1));
        if (this->self_ == nullptr) {
            std::abort();
        }
    }

private:
   static void free_mem(SelfType &p) noexcept
   {
        if (OWN_DATA && p != nullptr) {
            HiddenServiceHandler_delete(p);
        }
        p = nullptr;
   }
public:
    ~HiddenServiceHandlerWrapper() noexcept
    {
        free_mem(this->self_);
    }

private:
    SelfType self_;
};


} // namespace sifir_lib
