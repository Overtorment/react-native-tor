// Automatically generated by flapigen
#pragma once

//for assert
#include <cassert>
//for std::abort
#include <cstdlib>
//for std::move
#include <utility>
//for std::conditional
#include <type_traits>

#include "rust_str.h"
#include <boost/utility/string_view.hpp>
#include <stdint.h>

#include "c_TorServiceParam.h"

namespace sifir_lib {

template<bool>
class TorServiceParamWrapper;
using TorServiceParam = TorServiceParamWrapper<true>;
using TorServiceParamRef = TorServiceParamWrapper<false>;


template<bool OWN_DATA>
class TorServiceParamWrapper {
public:
    using value_type = TorServiceParamWrapper<true>;
    friend class TorServiceParamWrapper<true>;
    friend class TorServiceParamWrapper<false>;

    using SelfType = typename std::conditional<OWN_DATA, TorServiceParamOpaque *, const TorServiceParamOpaque *>::type;
    using CForeignType = TorServiceParamOpaque;

    TorServiceParamWrapper(TorServiceParamWrapper &&o) noexcept: self_(o.self_)
    {
        o.self_ = nullptr;
    }
    TorServiceParamWrapper &operator=(TorServiceParamWrapper &&o) noexcept
    {
        assert(this != &o);
        free_mem(this->self_);
        self_ = o.self_;
        o.self_ = nullptr;
        return *this;
    }
    explicit TorServiceParamWrapper(SelfType o) noexcept: self_(o) {}
    TorServiceParamOpaque *release() noexcept
    {
        TorServiceParamOpaque *ret = self_;
        self_ = nullptr;
        return ret;
    }
    explicit operator SelfType() const noexcept { return self_; }
    TorServiceParamWrapper<false> as_rref() const noexcept { return TorServiceParamWrapper<false>{ self_ }; }
    const TorServiceParamWrapper<true> &as_cref() const noexcept { return reinterpret_cast<const TorServiceParamWrapper<true> &>(*this); }

    TorServiceParamWrapper(const TorServiceParamWrapper&) = delete;
    TorServiceParamWrapper &operator=(const TorServiceParamWrapper&) = delete;

    TorServiceParamWrapper(boost::string_view data_dir, uint16_t socks_port, uint64_t bootstap_timeout_ms) noexcept
    {

        this->self_ = TorServiceParam_new(CRustStrView{ data_dir.data(), data_dir.size() }, socks_port, bootstap_timeout_ms);
        if (this->self_ == nullptr) {
            std::abort();
        }
    }

private:
   static void free_mem(SelfType &p) noexcept
   {
        if (OWN_DATA && p != nullptr) {
            TorServiceParam_delete(p);
        }
        p = nullptr;
   }
public:
    ~TorServiceParamWrapper() noexcept
    {
        free_mem(this->self_);
    }

private:
    SelfType self_;
};


} // namespace sifir_lib
