// Automatically generated by flapigen
#pragma once

//for assert
#include <cassert>
//for std::abort
#include <cstdlib>
//for std::move
#include <utility>
//for std::conditional
#include <type_traits>


#include "c_Logger.h"

namespace sifir_lib {

template<bool>
class LoggerWrapper;
using Logger = LoggerWrapper<true>;
using LoggerRef = LoggerWrapper<false>;


template<bool OWN_DATA>
class LoggerWrapper {
public:
    using value_type = LoggerWrapper<true>;
    friend class LoggerWrapper<true>;
    friend class LoggerWrapper<false>;

    using SelfType = typename std::conditional<OWN_DATA, LoggerOpaque *, const LoggerOpaque *>::type;
    using CForeignType = LoggerOpaque;

    LoggerWrapper(LoggerWrapper &&o) noexcept: self_(o.self_)
    {
        o.self_ = nullptr;
    }
    LoggerWrapper &operator=(LoggerWrapper &&o) noexcept
    {
        assert(this != &o);
        free_mem(this->self_);
        self_ = o.self_;
        o.self_ = nullptr;
        return *this;
    }
    explicit LoggerWrapper(SelfType o) noexcept: self_(o) {}
    LoggerOpaque *release() noexcept
    {
        LoggerOpaque *ret = self_;
        self_ = nullptr;
        return ret;
    }
    explicit operator SelfType() const noexcept { return self_; }
    LoggerWrapper<false> as_rref() const noexcept { return LoggerWrapper<false>{ self_ }; }
    const LoggerWrapper<true> &as_cref() const noexcept { return reinterpret_cast<const LoggerWrapper<true> &>(*this); }

    LoggerWrapper(const LoggerWrapper&) = delete;
    LoggerWrapper &operator=(const LoggerWrapper&) = delete;
private:

    LoggerWrapper() noexcept {}
public:

    static Logger new() noexcept;

private:
   static void free_mem(SelfType &p) noexcept
   {
        if (OWN_DATA && p != nullptr) {
            Logger_delete(p);
        }
        p = nullptr;
   }
public:
    ~LoggerWrapper() noexcept
    {
        free_mem(this->self_);
    }

private:
    SelfType self_;
};


    template<bool OWN_DATA>
    inline Logger LoggerWrapper<OWN_DATA>::new() noexcept
    {

        LoggerOpaque * ret = Logger_new();
        return Logger(static_cast<LoggerOpaque *>(ret));
    }

} // namespace sifir_lib
